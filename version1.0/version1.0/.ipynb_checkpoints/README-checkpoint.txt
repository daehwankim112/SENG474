==========

Project: Song Recommendation System using PCA + GMM + Nearest Neighbors

Description:
------------
This project implements a song recommendation system that leverages dimensionality reduction (PCA),
clustering (Gaussian Mixture Model, GMM), and nearest neighbor search. The goal is to recommend songs
similar to a given song ID, based on pre-processed song features.

The system performs the following steps:
1. Reads multiple CSV files containing:
   - PCA-transformed data (X_pca.csv)
   - Clustering labels (labels.csv)
   - Original standardized song features (scaled_songs.csv)
   - Filtered song ID and name mapping (filtered_id_name.csv)
2. Loads PCA on the original standardized song features (excluding the song ID column) to reduce dimensionality.
3. Trains a GMM clustering model on the PCA-transformed data.
4. In the prediction stage:
   - Given a song ID, it retrieves the corresponding song's feature vector.
   - Transforms the feature vector with the pre-trained PCA model.
   - Uses the GMM to predict the song's cluster label.
   - Retrieves all songs in the same cluster.
   - Performs a nearest neighbor search in the PCA space to find the top 10 similar songs.
   - Combines the filtered song data (including IDs and names) to display the recommended songs.

Dependencies:
-------------
- Python 3.x
- numpy
- pandas
- scikit-learn

You can install the necessary packages using pip. For example:
    pip install -r requirements.txt

File Structure:
---------------
- module.py: Contains the main module class that implements data loading, PCA, GMM training, and prediction.
- X_pca.csv: CSV file containing PCA-transformed song features.
- labels.csv: CSV file containing cluster labels (generated by GMM or previous clustering steps).
- scaled_songs.csv: CSV file containing the original standardized song features (first column: song ID, rest: features).
- filtered_id_name.csv: CSV file containing song metadata (columns include "id", "name", and possibly "artists").
- README.txt: This file.

Usage:
------
1. Ensure that all required CSV files are in the same directory as the module.
2. Run the module (for example, using an interactive session or by executing a script that instantiates the module class).

Example:
    >>> from module import module
    >>> recommender = module()
    >>> recommender.predict('7lmeHLHBe4nmXzuXc0HDjk')

This will print out the recommended songs (song IDs and corresponding metadata) based on the input song ID.

Error Handling:
---------------
- If any required CSV file is not found, the program will print an error message and exit.
- If the given song ID is not found in the database, the program will notify the user and exit.

Notes:
------
- The current implementation uses PCA with 5 components and GMM with 10 clusters. These parameters
  can be adjusted based on experimental results and requirements.
- The recommendation process uses a nearest neighbor search within the predicted cluster for efficiency.
- The project assumes that the filtered_id_name CSV file remains in a DataFrame format, while other
  files are converted to numpy arrays for efficient numerical operations.

Contact:
--------
For any questions or suggestions, please contact atuony0312@gmail.com .